title: Prussian Landtag Elections
new-page: true
tags: event
priority: -1
view-if: (year = prussia_election_year and month >= prussia_election_month) or (year > prussia_election_year)
on-departure: in_election = 0; prussia_election_year += 4;
set-jump: prussia_election_1928


= Prussian Elections, [+ month : month +] [+ year +]

The Prussian elections are to be held now.

- @election_algorithm: May we do our best...

@prussia_election_1928
on-arrival: {!
var total_prussia = 0;
console.log("Starting normalization of Prussian votes...");
// normalize prussian votes
for (var party of Q.parties) {
    Q[party+'_votes_prussia'] = 0;
    console.log(`Processing party: ${party}`);
    
    for (var c of Q.classes) {
        let votes = Q['prussia_'+c] * Q[c+'_'+party+'_normalized'] * Q['prussia_'+party];
        Q[party+'_votes_prussia'] += votes;
        total_prussia += votes;

        console.log(`  Class: ${c}, Votes: ${votes}, Cumulative Total: ${Q[party+'_votes_prussia']}`);
    }
}
for (var party of Q.parties) {
    Q[party+'_votes_prussia'] = Math.round((Q[party+'_votes_prussia'] / total_prussia) * 100);
    console.log(`Final percentage for ${party}: ${Q[party+'_votes_prussia']}%`);
}
console.log("Normalization complete. Total Prussian votes:", total_prussia);


// set old results
// election threshold constitutional reform
// banning parties
var new_party_sum = 0;
for (var party of Q.parties) {
    Q['old_' + party + '_pl'] = Q[party + '_pl'];
    if (Q.constitutional_reform > 0) {
        if (Q[party + '_votes_prussia'] < Q.electoral_threshold || (Q.electoral_threshold > 1 && party == 'other') || (Q[party + '_banned'] == 1)) {
            Q[party + '_pl'] = 0;
        } else {
            Q[party + '_pl'] = Q[party + '_votes_prussia'];
        }
        new_party_sum += Q[party + '_pl'];
    } else {
        Q[party + '_pl'] = Q[party + '_votes_prussia'];
    }
        // if we use decimals, then we might want to truncate the numbers
    if (Q.use_decimals) {
        Q[party + '_pl_disp'] = Q[party+'_pl'].toFixed(1);
    }  else {
            Q[party + '_pl_disp'] = Q[party+'_pl'];
    }
    Q['change_' + party + '_pl'] = Q[party + '_pl'] - Q['old_' + party + '_pl'];
    var sign = Q['change_' + party + '_pl'] > 0 ? '+'  : '';
    Q['stpl_change_' + party] = sign + Q['change_' + party + '_pl'];//.toFixed(1);
}
// calculate new party sum if electoral reform
if (Q.electoral_threshold && Q.electoral_threshold > 0 || Q.party_bans) {
    for (var party of Q.parties) {
        if (Q[party + '_pl'] > 0) {
            if (Q.use_decimals) {
                Q[party + '_pl'] = Math.round(Q[party + '_pl']*1000/new_party_sum)/10;
            } else {
                Q[party + '_pl'] = Math.round(Q[party + '_pl']*100/new_party_sum);
            }
        }
        if (Q.use_decimals) {
            Q[party + '_pl_disp'] = Q[party+'_pl'].toFixed(1);
        } else {
            Q[party + '_pl_disp'] = Q[party+'_pl'];
        }
        Q['change_' + party + '_pl'] = Q[party + '_pl'] - Q['old_' + party + '_pl'];
        var sign = Q['change_' + party + '_pl'] > 0 ? '+'  : '';
        Q['stpl_change_' + party] = sign + Q['change_' + party + '_pl'];//.toFixed(1);
    }
}

// get change arrows and signs


// The largest party can only be the NSDAP or the SPD.
Q.largest_party = 'SPD';
if (Q.nsdap_pl >= Q.spd_pl && Q.nsdap_pl >= Q.kpd_pl && Q.nsdap_pl >= Q.dvp_pl) {
    Q.largest_party = 'NSDAP';
}

if (Q.kpd_pl >= Q.spd_pl && Q.kpd_pl >= Q.nsdap_pl && Q.kpd_pl >= Q.dvp_pl) {
    Q.largest_party = 'KPD';
}

if (Q.dvp_pl >= Q.spd_pl && Q.dvp_pl >= Q.nsdap_pl&& Q.dvp_pl >= Q.kpd_pl) {
    Q.largest_party = dvp_name;
}

// coalitions
Q.p_weimar_coalition = Q.spd_pl + Q.ddp_pl + Q.z_pl;
Q.p_grand_coalition = Q.spd_pl + Q.ddp_pl + Q.z_pl + Q.dvp_pl;
Q.p_bourgeois_coalition = Q.ddp_pl + Q.z_pl + Q.dvp_pl + Q.other_pl;
Q.p_center_right_coalition = Q.z_pl + Q.ddp_pl + Q.dvp_pl + Q.other_pl + Q.dnvp_pl;
Q.p_right_coalition = Q.z_pl + Q.dvp_pl + Q.other_pl + Q.dnvp_pl;
Q.p_far_right_coalition = Q.dnvp_pl + Q.nsdap_pl;
Q.p_left_coalition = Q.spd_pl + Q.kpd_pl;
Q.p_anti_democratic_coalition = Q.kpd_pl + Q.nsdap_pl + Q.dnvp_pl;
Q.p_neo_weimar_coalition = Q.spd_pl + Q.ddp_pl + Q.z_pl + Q.dvp_pl + Q.other_pl;
Q.p_other_nazi = Math.round(Q.other_pl*(1-(Q.pro_republic/100)));
Q.p_hitler_right_coalition = Q.z_pl + Q.dnvp_pl + Q.nsdap_pl + Q.dvp_pl + Q.other_nazi;
Q.p_national_front_pl = Q.nsdap_pl + Q.dnvp_pl + Q.dvp_pl + Q.other_pl;
!}
on-departure: nazi_urgency = 1 if (nazi_urgency == 0 and nsdap_pl >= 15)

on-display: {!
data = [
    {
        "id": "kpd",
        "legend": "KPD",
        "name": "KPD",
        "seats": Math.round(Q.kpd_pl*4.5),
    }
];
if (Q.sapd_formed && Q.sapd_r) {
    data.push({
          "id": "sapd",
          "legend": "SAPD",
          "name": "SAPD",
          "seats": Math.round(Q.sapd_pl*4.5),
    });
}
data = data.concat([
    {
        "id": "spd",
        "legend": "SPD",
        "name": "SPD",
        "seats": Math.round(Q.spd_pl*4.5),
    }
]);
if (Q.lvp_formed == 0) {
    data.push({
        "id": "ddp",
        "legend": Q.ddp_name,
        "name": Q.ddp_name,
        "seats": Math.round(Q.ddp_pl*4.5),
    });
}
if (Q.lvp_formed == 1) {
    data.push({
        "id": "lvp",
        "legend": Q.dvp_name,
        "name": Q.dvp_name,
        "seats": Math.round(Q.dvp_pl*4.5),
    });
}
data = data.concat([
    {
        "id": "z",
        "legend": "Center",
        "name": "Center",
        "seats": Math.round(Q.z_pl*4.5),
    }
]);
if (Q.lvp_formed == 0) {
    data.push({
        "id": "dvp",
        "legend": Q.dvp_name,
        "name": Q.dvp_name,
        "seats": Math.round(Q.dvp_pl*4.5),
    });
}
data = data.concat([
    {
        "id": "other",
        "legend": "Other",
        "name": "Other",
        "seats": Math.round(Q.other_pl*4.5),
    }
]);
if (Q.kvp_formed && Q.kvp_r) {
    data.push({
        "id": "kvp",
        "legend": "KVP",
        "name": "KVP",
        "seats": Math.round(Q.kvp_pl*4.5),
    });
}
data = data.concat([
    {
          "id": "dnvp",
          "legend": "DNVP",
          "name": "DNVP",
          "seats": Math.round(Q.dnvp_pl*4.5),
      },
      {
          "id": "nsdap",
          "legend": "NSDAP",
          "name": "NSDAP",
          "seats": Math.round(Q.nsdap_pl*4.5),
      },
]);

if (window && d3) {
    var width = 500; 
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50; 
        height = width;
        document.getElementById("reichstag").style.height = screenWidth/2 + "px";
    } 

    var parliament = d3.parliament();
    parliament.width(width).height(height).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#reichstag").datum(data).call(parliament);
}
!}
#go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
[? if not lvp_formed: {!<tr><td><div class="box" style='background-color:#D5AC27; outline: 2px; outline-style: solid;'> </div> !} **[+ dvp_name +]**: {!</td><td>!} **[+ dvp_pl +]%** {!</td><td>!} **[+ stpl_change_dvp +]** {!</td></tr>!} ?]
[? if lvp_formed: {!<tr><td><div class="box" style='background-color:#FFA500; outline: 2px; outline-style: solid;'> </div> !} **[+ dvp_name +]**: {!</td><td>!} **[+ dvp_pl +]%** {!</td><td>!} **[+ stpl_change_dvp +]** {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#8B0000'> </div> !}KPD: {!</td><td>!} [+ kpd_pl +]% {!</td><td>!} [+ stpl_change_kpd +] {!</td></tr>!}

[? if sapd_formed : {!<tr><td><div class="box" style='background-color:#C40000'> </div> !}SAPD: {!</td><td>!} [+ sapd_pl +]% {!</td><td>!} [+ stpl_change_sapd +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#E3000F'> </div> !} SPD: {!</td><td>!} [+ spd_pl +]% {!</td><td>!} [+ stpl_change_spd +] {!</td></tr>!}

[? if not lvp_formed: {!<tr><td><div class="box" style='background-color:#DCCA4A'> </div> !} [+ ddp_name +]: {!</td><td>!} [+ ddp_pl +]% {!</td><td>!} [+ stpl_change_ddp +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#000'> </div> !} Z: {!</td><td>!} [+ z_pl +]% {!</td><td>!} [+ stpl_change_z +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ other_pl +] % {!</td><td>!} [+ stpl_change_other +] {!</td></tr>!}

[? if kvp_formed: {!<tr><td><div class="box" style='background-color:#455B95'> </div> !}KVP: {!</td><td>!} [+ kvp_pl +]% {!</td><td>!} [+ stpl_change_kvp +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#3f7bc1'> </div> !} DNVP: {!</td><td>!} [+ dnvp_pl +]% {!</td><td>!} [+ stpl_change_dnvp +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#954B00'> </div> !} NSDAP: {!</td><td>!} [+ nsdap_pl +]% {!</td><td>!} [+ stpl_change_nsdap +] {!</td></tr>!}
{!</table>!}
